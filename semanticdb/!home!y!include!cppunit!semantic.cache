;; Object cppunit/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "cppunit/"
  :tables (list 
   (semanticdb-table "TestAssert.h"
    :major-mode 'c++-mode
    :tags 
        '( ("CPPUNIT_TESTASSERT_H" variable (:constant-flag t) nil [38 58])
            ("cppunit/Portability.h" include (:system-flag t) nil [60 92])
            ("cppunit/Exception.h" include (:system-flag t) nil [93 123])
            ("cppunit/Asserter.h" include (:system-flag t) nil [124 153])
            ("cppunit/portability/Stream.h" include (:system-flag t) nil [154 193])
            ("stdio.h" include (:system-flag t) nil [194 212])
            ("float.h" include (:system-flag t) nil [213 231])
            ("assertion_traits" type
               (:template 
                  ( ("T" type (:type "class") nil nil))                  
                :type "struct"
                :members 
                  ( ("equal" function
                       (:typemodifiers ("static")
                        :arguments 
                          ( ("x" variable
                               (:reference 1
                                :constant-flag t
                                :type ("T" type (:type "class") nil nil))
                                (reparse-symbol arg-sub-list) [952 963])
                            ("y" variable
                               (:reference 1
                                :constant-flag t
                                :type ("T" type (:type "class") nil nil))
                                (reparse-symbol arg-sub-list) [964 976]))                          
                        :type "bool")
                        (reparse-symbol classsubparts) [933 1011])
                    ("toString" function
                       (:typemodifiers ("static")
                        :arguments 
                          ( ("x" variable
                               (:reference 1
                                :constant-flag t
                                :type ("T" type (:type "class") nil nil))
                                (reparse-symbol arg-sub-list) [1046 1058]))                          
                        :type ("std::string" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [1017 1141]))                  )
                nil [881 1144])
            ("assertion_traits" type
               (:type "struct"
                :members 
                  ( ("equal" function
                       (:typemodifiers ("static")
                        :arguments 
                          ( ("x" variable (:type "double") (reparse-symbol arg-sub-list) [1627 1636])
                            ("y" variable (:type "double") (reparse-symbol arg-sub-list) [1637 1647]))                          
                        :type "bool")
                        (reparse-symbol classsubparts) [1608 1682])
                    ("toString" function
                       (:typemodifiers ("static")
                        :arguments 
                          ( ("x" variable (:type "double") (reparse-symbol arg-sub-list) [1717 1727]))                          
                        :type ("std::string" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [1688 2121]))                  
                :template-specifier 
                  ( ("double" type nil nil nil))                  )
                nil [1556 2124])
            ("assertEquals" function
               (:template 
                  ( ("T" type (:type "class") nil nil))                  
                :type "void"
                :arguments 
                  ( ("expected" variable
                       (:reference 1
                        :constant-flag t
                        :type ("T" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [2356 2374])
                    ("actual" variable
                       (:reference 1
                        :constant-flag t
                        :type ("T" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [2394 2410])
                    ("sourceLine" variable (:type ("SourceLine" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2430 2452])
                    ("message" variable
                       (:reference 1
                        :constant-flag t
                        :type ("std::string" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [2472 2500]))                  )
                nil [2318 2812])
            ("assertDoubleEquals" function
               (:prototype-flag t
                :arguments 
                  ( ("expected" variable (:type "double") (reparse-symbol arg-sub-list) [3033 3049])
                    ("actual" variable (:type "double") (reparse-symbol arg-sub-list) [3087 3101])
                    ("delta" variable (:type "double") (reparse-symbol arg-sub-list) [3139 3152])
                    ("sourceLine" variable (:type ("SourceLine" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3190 3212])
                    ("message" variable
                       (:reference 1
                        :constant-flag t
                        :type ("std::string" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [3251 3279]))                  
                :type ("CPPUNIT_API" type (:type "class") nil nil))
                nil [3001 3280])
            ("CPPUNIT_ASSERT" variable (:constant-flag t) nil [3582 3596])
            ("CPPUNIT_ASSERT_MESSAGE" variable (:constant-flag t) nil [4566 4588])
            ("CPPUNIT_FAIL" variable (:constant-flag t) nil [5203 5215])
            ("CPPUNIT_ASSERT_EQUAL" variable (:constant-flag t) nil [6410 6430])
            ("CPPUNIT_ASSERT_EQUAL_MESSAGE" variable (:constant-flag t) nil [7406 7434])
            ("CPPUNIT_ASSERT_DOUBLES_EQUAL" variable (:constant-flag t) nil [7783 7811])
            ("CPPUNIT_ASSERT_DOUBLES_EQUAL_MESSAGE" variable (:constant-flag t) nil [8282 8318])
            ("CPPUNIT_ASSERT_THROW" variable (:constant-flag t) nil [8893 8913])
            ("CPPUNIT_EXTRACT_EXCEPTION_TYPE_" variable (:constant-flag t) nil [9220 9251])
            ("CPPUNIT_GET_PARAMETER_STRING" variable (:constant-flag t) nil [9531 9559])
            ("CPPUNIT_ASSERT_THROW_MESSAGE" variable (:constant-flag t) nil [9918 9946])
            ("CPPUNIT_ASSERT_NO_THROW" variable (:constant-flag t) nil [12250 12273])
            ("CPPUNIT_ASSERT_NO_THROW_MESSAGE" variable (:constant-flag t) nil [12764 12795])
            ("CPPUNIT_ASSERT_ASSERTION_FAIL" variable (:constant-flag t) nil [14503 14532])
            ("CPPUNIT_ASSERT_ASSERTION_FAIL_MESSAGE" variable (:constant-flag t) nil [14900 14937])
            ("CPPUNIT_ASSERT_ASSERTION_PASS" variable (:constant-flag t) nil [15249 15278])
            ("CPPUNIT_ASSERT_ASSERTION_PASS_MESSAGE" variable (:constant-flag t) nil [15629 15666])
            ("assert" variable (:constant-flag t) nil [15838 15844])
            ("assertEqual" variable (:constant-flag t) nil [15890 15901])
            ("assertDoublesEqual" variable (:constant-flag t) nil [15950 15968])
            ("assertLongsEqual" variable (:constant-flag t) nil [16020 16036]))          
    :file "TestAssert.h"
    :pointmax 16130
    :fsize 16129
    :lastmodtime '(19233 35880)
    :unmatched-syntax '((symbol 16082 . 16096) (VOID 2996 . 3000) (symbol 273 . 289))
    :lexical-table 
        '(("CPPUNIT_ASSERT_THROW" (spp-arg-list ("expression" "ExceptionType") 8913 . 8942) . ((symbol "CPPUNIT_ASSERT_THROW_MESSAGE" 8961 . 8989) (semantic-list "( CPPUNIT_NS::AdditionalMessage(),       \\
                                 expression,                            \\
                                 ExceptionType )" 8989 . 9154)))
          ("CPPUNIT_ASSERT_ASSERTION_FAIL_MESSAGE" (spp-arg-list ("message" "assertion") 14937 . 14959) . ((symbol "CPPUNIT_ASSERT_THROW_MESSAGE" 14968 . 14996) (semantic-list "( message, assertion, CPPUNIT_NS::Exception )" 14996 . 15041)))
          ("CPPUNIT_FAIL" (spp-arg-list ("message") 5215 . 5226) . ((semantic-list "( CPPUNIT_NS::Asserter::fail( CPPUNIT_NS::Message( \"forced failure\",  \\
                                                     message ),         \\
                                CPPUNIT_SOURCELINE() ) )" 5271 . 5473)))
          ("assertLongsEqual" (spp-arg-list ("e" "a") 16036 . 16041) . ((symbol "CPPUNIT_ASSERT_EQUAL" 16046 . 16066) (semantic-list "(e,a)" 16066 . 16071)))
          ("CPPUNIT_TESTASSERT_H")
          ("CPPUNIT_ASSERT_DOUBLES_EQUAL" (spp-arg-list ("expected" "actual" "delta") 7811 . 7834) . ((semantic-list "( CPPUNIT_NS::assertDoubleEquals( (expected),            \\
                                    (actual),              \\
                                    (delta),               \\
                                    CPPUNIT_SOURCELINE(),  \\
                                    \"\" ) )" 7846 . 8130)))
          ("CPPUNIT_ASSERT_ASSERTION_FAIL" (spp-arg-list ("assertion") 14532 . 14545) . ((symbol "CPPUNIT_ASSERT_THROW" 14567 . 14587) (semantic-list "( assertion, CPPUNIT_NS::Exception )" 14587 . 14623)))
          ("assert" (spp-arg-list ("c") 15844 . 15847) . ((symbol "CPPUNIT_ASSERT" 15864 . 15878) (semantic-list "(c)" 15878 . 15881)))
          ("CPPUNIT_ASSERT_EQUAL_MESSAGE" (spp-arg-list ("message" "expected" "actual") 7434 . 7459) . ((semantic-list "( CPPUNIT_NS::assertEquals( (expected),              \\
                              (actual),                \\
                              CPPUNIT_SOURCELINE(),    \\
                              (message) ) )" 7469 . 7681)))
          ("CPPUNIT_ASSERT_DOUBLES_EQUAL_MESSAGE" (spp-arg-list ("message" "expected" "actual" "delta") 8318 . 8349) . ((semantic-list "( CPPUNIT_NS::assertDoubleEquals( (expected),            \\
                                    (actual),              \\
                                    (delta),               \\
                                    CPPUNIT_SOURCELINE(),  \\
                                    (message) ) )" 8355 . 8646)))
          ("CPPUNIT_EXTRACT_EXCEPTION_TYPE_" (spp-arg-list ("exception" "no_rtti_message") 9251 . 9281) . 
              ((symbol "CPPUNIT_NS" 9287 . 9297) (punctuation ":" 9297 . 9298) (punctuation ":" 9298 . 9299) (symbol "TypeInfoHelper" 9299 . 9313) (punctuation ":" 9313 . 9314) (punctuation ":" 9314 . 9315) (symbol "getClassName" 9315 . 9327) (semantic-list "( typeid(exception) )" 9327 . 9348)))
          ("CPPUNIT_ASSERT_NO_THROW_MESSAGE" (spp-arg-list ("message" "expression") 12795 . 12818) . 
              ((DO "do" 12838 . 12840) (semantic-list "{                                                                       \\
      CPPUNIT_NS::Message cpputMsg_( \"unexpected exception caught\" );         \\
      cpputMsg_.addDetail( message );                                         \\
                                                                              \\
      try {                                                                   \\
         expression;                                                          \\
      } catch ( const std::exception &e ) {                                   \\
         cpputMsg_.addDetail( \"Caught: \" +                                    \\
                              CPPUNIT_EXTRACT_EXCEPTION_TYPE_( e,             \\
                                          \"std::exception or derived\" ) );    \\
         cpputMsg_.addDetail( std::string(\"What(): \") + e.what() );           \\
         CPPUNIT_NS::Asserter::fail( cpputMsg_,                               \\
                                     CPPUNIT_SOURCELINE() );                  \\
      } catch ( ... ) {                                                       \\
         cpputMsg_.addDetail( \"Caught: unknown.\" );                           \\
         CPPUNIT_NS::Asserter::fail( cpputMsg_,                               \\
                                     CPPUNIT_SOURCELINE() );                  \\
      }                                                                       \\
   }" 12841 . 14279) (WHILE "while" 14280 . 14285) (semantic-list "( false )" 14286 . 14295)))
          ("assertEqual" (spp-arg-list ("e" "a") 15901 . 15906) . ((symbol "CPPUNIT_ASSERT_EQUAL" 15916 . 15936) (semantic-list "(e,a)" 15936 . 15941)))
          ("CPPUNIT_ASSERT_EQUAL" (spp-arg-list ("expected" "actual") 6430 . 6447) . ((semantic-list "( CPPUNIT_NS::assertEquals( (expected),              \\
                              (actual),                \\
                              CPPUNIT_SOURCELINE(),    \\
                              \"\" ) )" 6461 . 6666)))
          ("CPPUNIT_ASSERT_ASSERTION_PASS_MESSAGE" (spp-arg-list ("message" "assertion") 15666 . 15688) . ((symbol "CPPUNIT_ASSERT_NO_THROW_MESSAGE" 15697 . 15728) (semantic-list "( message, assertion )" 15728 . 15750)))
          ("assertDoublesEqual" (spp-arg-list ("e" "a" "d") 15968 . 15975) . ((symbol "CPPUNIT_ASSERT_DOUBLES_EQUAL" 15976 . 16004) (semantic-list "(e,a,d)" 16004 . 16011)))
          ("CPPUNIT_ASSERT" (spp-arg-list ("condition") 3596 . 3607) . ((semantic-list "( CPPUNIT_NS::Asserter::failIf( !(condition),                                   \\
                                 CPPUNIT_NS::Message( \"assertion failed\",         \\
                                                      \"Expression: \" #condition), \\
                                 CPPUNIT_SOURCELINE() ) )" 3660 . 3967)))
          ("CPPUNIT_GET_PARAMETER_STRING" (spp-arg-list ("parameter") 9559 . 9572) . ((punctuation "#" 9573 . 9574) (symbol "parameter" 9574 . 9583)))
          ("CPPUNIT_ASSERT_THROW_MESSAGE" (spp-arg-list ("message" "expression" "ExceptionType") 9946 . 9984) . 
              ((DO "do" 9992 . 9994) (semantic-list "{                                                                       \\
      bool cpputCorrectExceptionThrown_ = false;                              \\
      CPPUNIT_NS::Message cpputMsg_( \"expected exception not thrown\" );       \\
      cpputMsg_.addDetail( message );                                         \\
      cpputMsg_.addDetail( \"Expected: \"                                       \\
                           CPPUNIT_GET_PARAMETER_STRING( ExceptionType ) );   \\
                                                                              \\
      try {                                                                   \\
         expression;                                                          \\
      } catch ( const ExceptionType & ) {                                     \\
         cpputCorrectExceptionThrown_ = true;                                 \\
      } catch ( const std::exception &e) {                                    \\
         cpputMsg_.addDetail( \"Actual  : \" +                                  \\
                              CPPUNIT_EXTRACT_EXCEPTION_TYPE_( e,             \\
                                          \"std::exception or derived\") );     \\
         cpputMsg_.addDetail( std::string(\"What()  : \") + e.what() );         \\
      } catch ( ... ) {                                                       \\
         cpputMsg_.addDetail( \"Actual  : unknown.\");                          \\
      }                                                                       \\
                                                                              \\
      if ( cpputCorrectExceptionThrown_ )                                     \\
         break;                                                               \\
                                                                              \\
      CPPUNIT_NS::Asserter::fail( cpputMsg_,                                  \\
                                  CPPUNIT_SOURCELINE() );                     \\
   }" 9995 . 11993) (WHILE "while" 11994 . 11999) (semantic-list "( false )" 12000 . 12009)))
          ("CPPUNIT_ASSERT_NO_THROW" (spp-arg-list ("expression") 12273 . 12287) . ((symbol "CPPUNIT_ASSERT_NO_THROW_MESSAGE" 12321 . 12352) (semantic-list "( CPPUNIT_NS::AdditionalMessage(),       \\
                                    expression )" 12352 . 12443)))
          ("CPPUNIT_ASSERT_MESSAGE" (spp-arg-list ("message" "condition") 4588 . 4607) . ((semantic-list "( CPPUNIT_NS::Asserter::failIf( !(condition),                            \\
                                  CPPUNIT_NS::Message( \"assertion failed\", \\
                                                       \"Expression: \"      \\
                                                       #condition,         \\
                                                       message ),          \\
                                  CPPUNIT_SOURCELINE() ) )" 4637 . 5078)))
          ("CPPUNIT_ASSERT_ASSERTION_PASS" (spp-arg-list ("assertion") 15278 . 15291) . ((symbol "CPPUNIT_ASSERT_NO_THROW" 15313 . 15336) (semantic-list "( assertion )" 15336 . 15349)))
          )

    )
   )
  :file "!home!y!include!cppunit!semantic.cache"
  :semantic-tag-version "2.0pre7"
  :semanticdb-version "2.0pre7"
  )
